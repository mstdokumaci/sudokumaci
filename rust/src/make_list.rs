pub const BIT9: [usize; 9] = [
    0b000000001,
    0b000000010,
    0b000000100,
    0b000001000,
    0b000010000,
    0b000100000,
    0b001000000,
    0b010000000,
    0b100000000,
];

fn get_bits_list(bits: usize) -> Vec<usize> {
    BIT9.iter()
        .enumerate()
        .filter(|bit| bits & bit.1 != 0)
        .map(|bit| bit.0)
        .collect::<Vec<usize>>()
}

fn get_bits_lists() -> [Vec<usize>; 512] {
    const INIT: Vec<usize> = vec![];
    let mut bits_list = [INIT; 512];
    let mut bits = 0;
    while bits < 512 {
        bits_list[bits] = get_bits_list(bits);
        bits += 1;
    }
    bits_list
}

lazy_static! {
    pub static ref BITS_LISTS: [Vec<usize>; 512] = get_bits_lists();
}

pub const BIT81: [u128; 81] = [
    0b1,
    0b10,
    0b100,
    0b1000,
    0b10000,
    0b100000,
    0b1000000,
    0b10000000,
    0b100000000,
    0b1000000000,
    0b10000000000,
    0b100000000000,
    0b1000000000000,
    0b10000000000000,
    0b100000000000000,
    0b1000000000000000,
    0b10000000000000000,
    0b100000000000000000,
    0b1000000000000000000,
    0b10000000000000000000,
    0b100000000000000000000,
    0b1000000000000000000000,
    0b10000000000000000000000,
    0b100000000000000000000000,
    0b1000000000000000000000000,
    0b10000000000000000000000000,
    0b100000000000000000000000000,
    0b1000000000000000000000000000,
    0b10000000000000000000000000000,
    0b100000000000000000000000000000,
    0b1000000000000000000000000000000,
    0b10000000000000000000000000000000,
    0b100000000000000000000000000000000,
    0b1000000000000000000000000000000000,
    0b10000000000000000000000000000000000,
    0b100000000000000000000000000000000000,
    0b1000000000000000000000000000000000000,
    0b10000000000000000000000000000000000000,
    0b100000000000000000000000000000000000000,
    0b1000000000000000000000000000000000000000,
    0b10000000000000000000000000000000000000000,
    0b100000000000000000000000000000000000000000,
    0b1000000000000000000000000000000000000000000,
    0b10000000000000000000000000000000000000000000,
    0b100000000000000000000000000000000000000000000,
    0b1000000000000000000000000000000000000000000000,
    0b10000000000000000000000000000000000000000000000,
    0b100000000000000000000000000000000000000000000000,
    0b1000000000000000000000000000000000000000000000000,
    0b10000000000000000000000000000000000000000000000000,
    0b100000000000000000000000000000000000000000000000000,
    0b1000000000000000000000000000000000000000000000000000,
    0b10000000000000000000000000000000000000000000000000000,
    0b100000000000000000000000000000000000000000000000000000,
    0b1000000000000000000000000000000000000000000000000000000,
    0b10000000000000000000000000000000000000000000000000000000,
    0b100000000000000000000000000000000000000000000000000000000,
    0b1000000000000000000000000000000000000000000000000000000000,
    0b10000000000000000000000000000000000000000000000000000000000,
    0b100000000000000000000000000000000000000000000000000000000000,
    0b1000000000000000000000000000000000000000000000000000000000000,
    0b10000000000000000000000000000000000000000000000000000000000000,
    0b100000000000000000000000000000000000000000000000000000000000000,
    0b1000000000000000000000000000000000000000000000000000000000000000,
    0b10000000000000000000000000000000000000000000000000000000000000000,
    0b100000000000000000000000000000000000000000000000000000000000000000,
    0b1000000000000000000000000000000000000000000000000000000000000000000,
    0b10000000000000000000000000000000000000000000000000000000000000000000,
    0b100000000000000000000000000000000000000000000000000000000000000000000,
    0b1000000000000000000000000000000000000000000000000000000000000000000000,
    0b10000000000000000000000000000000000000000000000000000000000000000000000,
    0b100000000000000000000000000000000000000000000000000000000000000000000000,
    0b1000000000000000000000000000000000000000000000000000000000000000000000000,
    0b10000000000000000000000000000000000000000000000000000000000000000000000000,
    0b100000000000000000000000000000000000000000000000000000000000000000000000000,
    0b1000000000000000000000000000000000000000000000000000000000000000000000000000,
    0b10000000000000000000000000000000000000000000000000000000000000000000000000000,
    0b100000000000000000000000000000000000000000000000000000000000000000000000000000,
    0b1000000000000000000000000000000000000000000000000000000000000000000000000000000,
    0b10000000000000000000000000000000000000000000000000000000000000000000000000000000,
    0b100000000000000000000000000000000000000000000000000000000000000000000000000000000,
];

pub const GROUPS: [u128; 27] = [
    0b111111111,
    0b111111111000000000,
    0b111111111000000000000000000,
    0b111111111000000000000000000000000000,
    0b111111111000000000000000000000000000000000000,
    0b111111111000000000000000000000000000000000000000000000,
    0b111111111000000000000000000000000000000000000000000000000000000,
    0b111111111000000000000000000000000000000000000000000000000000000000000000,
    0b111111111000000000000000000000000000000000000000000000000000000000000000000000000,
    0b1000000001000000001000000001000000001000000001000000001000000001000000001,
    0b10000000010000000010000000010000000010000000010000000010000000010000000010,
    0b100000000100000000100000000100000000100000000100000000100000000100000000100,
    0b1000000001000000001000000001000000001000000001000000001000000001000000001000,
    0b10000000010000000010000000010000000010000000010000000010000000010000000010000,
    0b100000000100000000100000000100000000100000000100000000100000000100000000100000,
    0b1000000001000000001000000001000000001000000001000000001000000001000000001000000,
    0b10000000010000000010000000010000000010000000010000000010000000010000000010000000,
    0b100000000100000000100000000100000000100000000100000000100000000100000000100000000,
    0b111000000111000000111,
    0b111000000111000000111000,
    0b111000000111000000111000000,
    0b111000000111000000111000000000000000000000000000,
    0b111000000111000000111000000000000000000000000000000,
    0b111000000111000000111000000000000000000000000000000000,
    0b111000000111000000111000000000000000000000000000000000000000000000000000000,
    0b111000000111000000111000000000000000000000000000000000000000000000000000000000,
    0b111000000111000000111000000000000000000000000000000000000000000000000000000000000,
];

const ALL81: u128 =
    0b111111111111111111111111111111111111111111111111111111111111111111111111111111111;

pub const SET_CELLS: [u128; 81] = [
    0b111111110111111110111111110111111110111111110111111110111111000111111000000000001,
    0b111111101111111101111111101111111101111111101111111101111111000111111000000000010,
    0b111111011111111011111111011111111011111111011111111011111111000111111000000000100,
    0b111110111111110111111110111111110111111110111111110111111000111111000111000001000,
    0b111101111111101111111101111111101111111101111111101111111000111111000111000010000,
    0b111011111111011111111011111111011111111011111111011111111000111111000111000100000,
    0b110111111110111111110111111110111111110111111110111111000111111000111111001000000,
    0b101111111101111111101111111101111111101111111101111111000111111000111111010000000,
    0b011111111011111111011111111011111111011111111011111111000111111000111111100000000,
    0b111111110111111110111111110111111110111111110111111110111111000000000001111111000,
    0b111111101111111101111111101111111101111111101111111101111111000000000010111111000,
    0b111111011111111011111111011111111011111111011111111011111111000000000100111111000,
    0b111110111111110111111110111111110111111110111111110111111000111000001000111000111,
    0b111101111111101111111101111111101111111101111111101111111000111000010000111000111,
    0b111011111111011111111011111111011111111011111111011111111000111000100000111000111,
    0b110111111110111111110111111110111111110111111110111111000111111001000000000111111,
    0b101111111101111111101111111101111111101111111101111111000111111010000000000111111,
    0b011111111011111111011111111011111111011111111011111111000111111100000000000111111,
    0b111111110111111110111111110111111110111111110111111110000000001111111000111111000,
    0b111111101111111101111111101111111101111111101111111101000000010111111000111111000,
    0b111111011111111011111111011111111011111111011111111011000000100111111000111111000,
    0b111110111111110111111110111111110111111110111111110111000001000111000111111000111,
    0b111101111111101111111101111111101111111101111111101111000010000111000111111000111,
    0b111011111111011111111011111111011111111011111111011111000100000111000111111000111,
    0b110111111110111111110111111110111111110111111110111111001000000000111111000111111,
    0b101111111101111111101111111101111111101111111101111111010000000000111111000111111,
    0b011111111011111111011111111011111111011111111011111111100000000000111111000111111,
    0b111111110111111110111111110111111000111111000000000001111111110111111110111111110,
    0b111111101111111101111111101111111000111111000000000010111111101111111101111111101,
    0b111111011111111011111111011111111000111111000000000100111111011111111011111111011,
    0b111110111111110111111110111111000111111000111000001000111110111111110111111110111,
    0b111101111111101111111101111111000111111000111000010000111101111111101111111101111,
    0b111011111111011111111011111111000111111000111000100000111011111111011111111011111,
    0b110111111110111111110111111000111111000111111001000000110111111110111111110111111,
    0b101111111101111111101111111000111111000111111010000000101111111101111111101111111,
    0b011111111011111111011111111000111111000111111100000000011111111011111111011111111,
    0b111111110111111110111111110111111000000000001111111000111111110111111110111111110,
    0b111111101111111101111111101111111000000000010111111000111111101111111101111111101,
    0b111111011111111011111111011111111000000000100111111000111111011111111011111111011,
    0b111110111111110111111110111111000111000001000111000111111110111111110111111110111,
    0b111101111111101111111101111111000111000010000111000111111101111111101111111101111,
    0b111011111111011111111011111111000111000100000111000111111011111111011111111011111,
    0b110111111110111111110111111000111111001000000000111111110111111110111111110111111,
    0b101111111101111111101111111000111111010000000000111111101111111101111111101111111,
    0b011111111011111111011111111000111111100000000000111111011111111011111111011111111,
    0b111111110111111110111111110000000001111111000111111000111111110111111110111111110,
    0b111111101111111101111111101000000010111111000111111000111111101111111101111111101,
    0b111111011111111011111111011000000100111111000111111000111111011111111011111111011,
    0b111110111111110111111110111000001000111000111111000111111110111111110111111110111,
    0b111101111111101111111101111000010000111000111111000111111101111111101111111101111,
    0b111011111111011111111011111000100000111000111111000111111011111111011111111011111,
    0b110111111110111111110111111001000000000111111000111111110111111110111111110111111,
    0b101111111101111111101111111010000000000111111000111111101111111101111111101111111,
    0b011111111011111111011111111100000000000111111000111111011111111011111111011111111,
    0b111111000111111000000000001111111110111111110111111110111111110111111110111111110,
    0b111111000111111000000000010111111101111111101111111101111111101111111101111111101,
    0b111111000111111000000000100111111011111111011111111011111111011111111011111111011,
    0b111000111111000111000001000111110111111110111111110111111110111111110111111110111,
    0b111000111111000111000010000111101111111101111111101111111101111111101111111101111,
    0b111000111111000111000100000111011111111011111111011111111011111111011111111011111,
    0b000111111000111111001000000110111111110111111110111111110111111110111111110111111,
    0b000111111000111111010000000101111111101111111101111111101111111101111111101111111,
    0b000111111000111111100000000011111111011111111011111111011111111011111111011111111,
    0b111111000000000001111111000111111110111111110111111110111111110111111110111111110,
    0b111111000000000010111111000111111101111111101111111101111111101111111101111111101,
    0b111111000000000100111111000111111011111111011111111011111111011111111011111111011,
    0b111000111000001000111000111111110111111110111111110111111110111111110111111110111,
    0b111000111000010000111000111111101111111101111111101111111101111111101111111101111,
    0b111000111000100000111000111111011111111011111111011111111011111111011111111011111,
    0b000111111001000000000111111110111111110111111110111111110111111110111111110111111,
    0b000111111010000000000111111101111111101111111101111111101111111101111111101111111,
    0b000111111100000000000111111011111111011111111011111111011111111011111111011111111,
    0b000000001111111000111111000111111110111111110111111110111111110111111110111111110,
    0b000000010111111000111111000111111101111111101111111101111111101111111101111111101,
    0b000000100111111000111111000111111011111111011111111011111111011111111011111111011,
    0b000001000111000111111000111111110111111110111111110111111110111111110111111110111,
    0b000010000111000111111000111111101111111101111111101111111101111111101111111101111,
    0b000100000111000111111000111111011111111011111111011111111011111111011111111011111,
    0b001000000000111111000111111110111111110111111110111111110111111110111111110111111,
    0b010000000000111111000111111101111111101111111101111111101111111101111111101111111,
    0b100000000000111111000111111011111111011111111011111111011111111011111111011111111,
];

pub fn make_set_cells() {
    for cell_index in 0..81 as usize {
        let row = cell_index / 9;
        let col = cell_index % 9;
        let sqr = 3 * (row / 3) + col / 3;
        let set_cell =
            ((GROUPS[row] | GROUPS[col + 9] | GROUPS[sqr + 18]) ^ ALL81) | BIT81[cell_index];
        println!("0b{:081b},", set_cell)
    }
}

pub fn make_possibles() {
    let mut possibles: Vec<u128> = vec![ALL81];
    for row_index in 0..9 as usize {
        let mut new_possibles: Vec<u128> = Vec::new();
        for possible in possibles {
            let columns = ((possible & GROUPS[row_index]) >> (row_index * 9)) as usize;
            for col_index in BITS_LISTS.get(columns).unwrap().iter() {
                new_possibles.push(possible & SET_CELLS[row_index * 9 + col_index])
            }
        }
        possibles = new_possibles
    }
    for possible in possibles {
        println!("0b{:081b},", possible)
    }
}
