use std::fmt;

pub const BIT64: [usize; 64] = [
    0b0000000000000000000000000000000000000000000000000000000000000001,
    0b0000000000000000000000000000000000000000000000000000000000000010,
    0b0000000000000000000000000000000000000000000000000000000000000100,
    0b0000000000000000000000000000000000000000000000000000000000001000,
    0b0000000000000000000000000000000000000000000000000000000000010000,
    0b0000000000000000000000000000000000000000000000000000000000100000,
    0b0000000000000000000000000000000000000000000000000000000001000000,
    0b0000000000000000000000000000000000000000000000000000000010000000,
    0b0000000000000000000000000000000000000000000000000000000100000000,
    0b0000000000000000000000000000000000000000000000000000001000000000,
    0b0000000000000000000000000000000000000000000000000000010000000000,
    0b0000000000000000000000000000000000000000000000000000100000000000,
    0b0000000000000000000000000000000000000000000000000001000000000000,
    0b0000000000000000000000000000000000000000000000000010000000000000,
    0b0000000000000000000000000000000000000000000000000100000000000000,
    0b0000000000000000000000000000000000000000000000001000000000000000,
    0b0000000000000000000000000000000000000000000000010000000000000000,
    0b0000000000000000000000000000000000000000000000100000000000000000,
    0b0000000000000000000000000000000000000000000001000000000000000000,
    0b0000000000000000000000000000000000000000000010000000000000000000,
    0b0000000000000000000000000000000000000000000100000000000000000000,
    0b0000000000000000000000000000000000000000001000000000000000000000,
    0b0000000000000000000000000000000000000000010000000000000000000000,
    0b0000000000000000000000000000000000000000100000000000000000000000,
    0b0000000000000000000000000000000000000001000000000000000000000000,
    0b0000000000000000000000000000000000000010000000000000000000000000,
    0b0000000000000000000000000000000000000100000000000000000000000000,
    0b0000000000000000000000000000000000001000000000000000000000000000,
    0b0000000000000000000000000000000000010000000000000000000000000000,
    0b0000000000000000000000000000000000100000000000000000000000000000,
    0b0000000000000000000000000000000001000000000000000000000000000000,
    0b0000000000000000000000000000000010000000000000000000000000000000,
    0b0000000000000000000000000000000100000000000000000000000000000000,
    0b0000000000000000000000000000001000000000000000000000000000000000,
    0b0000000000000000000000000000010000000000000000000000000000000000,
    0b0000000000000000000000000000100000000000000000000000000000000000,
    0b0000000000000000000000000001000000000000000000000000000000000000,
    0b0000000000000000000000000010000000000000000000000000000000000000,
    0b0000000000000000000000000100000000000000000000000000000000000000,
    0b0000000000000000000000001000000000000000000000000000000000000000,
    0b0000000000000000000000010000000000000000000000000000000000000000,
    0b0000000000000000000000100000000000000000000000000000000000000000,
    0b0000000000000000000001000000000000000000000000000000000000000000,
    0b0000000000000000000010000000000000000000000000000000000000000000,
    0b0000000000000000000100000000000000000000000000000000000000000000,
    0b0000000000000000001000000000000000000000000000000000000000000000,
    0b0000000000000000010000000000000000000000000000000000000000000000,
    0b0000000000000000100000000000000000000000000000000000000000000000,
    0b0000000000000001000000000000000000000000000000000000000000000000,
    0b0000000000000010000000000000000000000000000000000000000000000000,
    0b0000000000000100000000000000000000000000000000000000000000000000,
    0b0000000000001000000000000000000000000000000000000000000000000000,
    0b0000000000010000000000000000000000000000000000000000000000000000,
    0b0000000000100000000000000000000000000000000000000000000000000000,
    0b0000000001000000000000000000000000000000000000000000000000000000,
    0b0000000010000000000000000000000000000000000000000000000000000000,
    0b0000000100000000000000000000000000000000000000000000000000000000,
    0b0000001000000000000000000000000000000000000000000000000000000000,
    0b0000010000000000000000000000000000000000000000000000000000000000,
    0b0000100000000000000000000000000000000000000000000000000000000000,
    0b0001000000000000000000000000000000000000000000000000000000000000,
    0b0010000000000000000000000000000000000000000000000000000000000000,
    0b0100000000000000000000000000000000000000000000000000000000000000,
    0b1000000000000000000000000000000000000000000000000000000000000000,
];

pub struct BitSet {
    bits_list: [usize; 3],
}

impl BitSet {
    pub fn new() -> BitSet {
        BitSet { bits_list: [0; 3] }
    }

    pub fn add(&mut self, index: usize) {
        self.bits_list[index / 64] |= BIT64[index % 64]
    }
}

impl fmt::Display for BitSet {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(
            f,
            "[0b{:064b}, 0b{:064b}, 0b{:064b}]",
            self.bits_list[0], self.bits_list[1], self.bits_list[2]
        )
    }
}

pub fn intersect2(list1: &[usize; 3], list2: &[usize; 3]) -> [usize; 3] {
    [
        list1.get(0).unwrap() & list2.get(0).unwrap(),
        list1.get(1).unwrap() & list2.get(1).unwrap(),
        list1.get(2).unwrap() & list2.get(2).unwrap(),
    ]
}

pub fn intersect3(list1: &[usize; 3], list2: &[usize; 3], list3: &[usize; 3]) -> [usize; 3] {
    [
        list1.get(0).unwrap() & list2.get(0).unwrap() & list3.get(0).unwrap(),
        list1.get(1).unwrap() & list2.get(1).unwrap() & list3.get(1).unwrap(),
        list1.get(2).unwrap() & list2.get(2).unwrap() & list3.get(2).unwrap(),
    ]
}

pub struct BitSetTraverse {
    bits_list: [usize; 3],
    bit_index: usize,
}

impl BitSetTraverse {
    pub fn new(bits_list: [usize; 3]) -> BitSetTraverse {
        BitSetTraverse {
            bits_list: bits_list,
            bit_index: 0,
        }
    }
}

impl Iterator for BitSetTraverse {
    type Item = usize;
    fn next(&mut self) -> Option<Self::Item> {
        let mut list_index = self.bit_index / 64;
        while list_index < 3 {
            if self.bits_list[list_index] != 0 {
                let tz = self.bits_list[list_index].trailing_zeros() as usize;
                let bit_index = self.bit_index + tz;
                let shift = tz + 1;
                if shift != 64 {
                    self.bits_list[list_index] >>= shift;
                }
                self.bit_index += shift;
                return Some(bit_index);
            }
            list_index += 1;
            self.bit_index = list_index * 64;
        }
        None
    }
}
