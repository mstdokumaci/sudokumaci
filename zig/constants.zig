const std = @import("std");

pub const ALL27: usize = 0b111111111111111111111111111;

pub const ALL81: u81 = 0b111111111111111111111111111111111111111111111111111111111111111111111111111111111;

pub const ALL162: u192 = 0b111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111;

pub const BIT9 = [9]usize{
    0b000000001,
    0b000000010,
    0b000000100,
    0b000001000,
    0b000010000,
    0b000100000,
    0b001000000,
    0b010000000,
    0b100000000,
};

const BIT27 = [27]usize{
    0b000000000000000000000000001,
    0b000000000000000000000000010,
    0b000000000000000000000000100,
    0b000000000000000000000001000,
    0b000000000000000000000010000,
    0b000000000000000000000100000,
    0b000000000000000000001000000,
    0b000000000000000000010000000,
    0b000000000000000000100000000,
    0b000000000000000001000000000,
    0b000000000000000010000000000,
    0b000000000000000100000000000,
    0b000000000000001000000000000,
    0b000000000000010000000000000,
    0b000000000000100000000000000,
    0b000000000001000000000000000,
    0b000000000010000000000000000,
    0b000000000100000000000000000,
    0b000000001000000000000000000,
    0b000000010000000000000000000,
    0b000000100000000000000000000,
    0b000001000000000000000000000,
    0b000010000000000000000000000,
    0b000100000000000000000000000,
    0b001000000000000000000000000,
    0b010000000000000000000000000,
    0b100000000000000000000000000,
};

pub const BIT81 = [81]u81{
    0b000000000000000000000000000000000000000000000000000000000000000000000000000000001,
    0b000000000000000000000000000000000000000000000000000000000000000000000000000000010,
    0b000000000000000000000000000000000000000000000000000000000000000000000000000000100,
    0b000000000000000000000000000000000000000000000000000000000000000000000000000001000,
    0b000000000000000000000000000000000000000000000000000000000000000000000000000010000,
    0b000000000000000000000000000000000000000000000000000000000000000000000000000100000,
    0b000000000000000000000000000000000000000000000000000000000000000000000000001000000,
    0b000000000000000000000000000000000000000000000000000000000000000000000000010000000,
    0b000000000000000000000000000000000000000000000000000000000000000000000000100000000,
    0b000000000000000000000000000000000000000000000000000000000000000000000001000000000,
    0b000000000000000000000000000000000000000000000000000000000000000000000010000000000,
    0b000000000000000000000000000000000000000000000000000000000000000000000100000000000,
    0b000000000000000000000000000000000000000000000000000000000000000000001000000000000,
    0b000000000000000000000000000000000000000000000000000000000000000000010000000000000,
    0b000000000000000000000000000000000000000000000000000000000000000000100000000000000,
    0b000000000000000000000000000000000000000000000000000000000000000001000000000000000,
    0b000000000000000000000000000000000000000000000000000000000000000010000000000000000,
    0b000000000000000000000000000000000000000000000000000000000000000100000000000000000,
    0b000000000000000000000000000000000000000000000000000000000000001000000000000000000,
    0b000000000000000000000000000000000000000000000000000000000000010000000000000000000,
    0b000000000000000000000000000000000000000000000000000000000000100000000000000000000,
    0b000000000000000000000000000000000000000000000000000000000001000000000000000000000,
    0b000000000000000000000000000000000000000000000000000000000010000000000000000000000,
    0b000000000000000000000000000000000000000000000000000000000100000000000000000000000,
    0b000000000000000000000000000000000000000000000000000000001000000000000000000000000,
    0b000000000000000000000000000000000000000000000000000000010000000000000000000000000,
    0b000000000000000000000000000000000000000000000000000000100000000000000000000000000,
    0b000000000000000000000000000000000000000000000000000001000000000000000000000000000,
    0b000000000000000000000000000000000000000000000000000010000000000000000000000000000,
    0b000000000000000000000000000000000000000000000000000100000000000000000000000000000,
    0b000000000000000000000000000000000000000000000000001000000000000000000000000000000,
    0b000000000000000000000000000000000000000000000000010000000000000000000000000000000,
    0b000000000000000000000000000000000000000000000000100000000000000000000000000000000,
    0b000000000000000000000000000000000000000000000001000000000000000000000000000000000,
    0b000000000000000000000000000000000000000000000010000000000000000000000000000000000,
    0b000000000000000000000000000000000000000000000100000000000000000000000000000000000,
    0b000000000000000000000000000000000000000000001000000000000000000000000000000000000,
    0b000000000000000000000000000000000000000000010000000000000000000000000000000000000,
    0b000000000000000000000000000000000000000000100000000000000000000000000000000000000,
    0b000000000000000000000000000000000000000001000000000000000000000000000000000000000,
    0b000000000000000000000000000000000000000010000000000000000000000000000000000000000,
    0b000000000000000000000000000000000000000100000000000000000000000000000000000000000,
    0b000000000000000000000000000000000000001000000000000000000000000000000000000000000,
    0b000000000000000000000000000000000000010000000000000000000000000000000000000000000,
    0b000000000000000000000000000000000000100000000000000000000000000000000000000000000,
    0b000000000000000000000000000000000001000000000000000000000000000000000000000000000,
    0b000000000000000000000000000000000010000000000000000000000000000000000000000000000,
    0b000000000000000000000000000000000100000000000000000000000000000000000000000000000,
    0b000000000000000000000000000000001000000000000000000000000000000000000000000000000,
    0b000000000000000000000000000000010000000000000000000000000000000000000000000000000,
    0b000000000000000000000000000000100000000000000000000000000000000000000000000000000,
    0b000000000000000000000000000001000000000000000000000000000000000000000000000000000,
    0b000000000000000000000000000010000000000000000000000000000000000000000000000000000,
    0b000000000000000000000000000100000000000000000000000000000000000000000000000000000,
    0b000000000000000000000000001000000000000000000000000000000000000000000000000000000,
    0b000000000000000000000000010000000000000000000000000000000000000000000000000000000,
    0b000000000000000000000000100000000000000000000000000000000000000000000000000000000,
    0b000000000000000000000001000000000000000000000000000000000000000000000000000000000,
    0b000000000000000000000010000000000000000000000000000000000000000000000000000000000,
    0b000000000000000000000100000000000000000000000000000000000000000000000000000000000,
    0b000000000000000000001000000000000000000000000000000000000000000000000000000000000,
    0b000000000000000000010000000000000000000000000000000000000000000000000000000000000,
    0b000000000000000000100000000000000000000000000000000000000000000000000000000000000,
    0b000000000000000001000000000000000000000000000000000000000000000000000000000000000,
    0b000000000000000010000000000000000000000000000000000000000000000000000000000000000,
    0b000000000000000100000000000000000000000000000000000000000000000000000000000000000,
    0b000000000000001000000000000000000000000000000000000000000000000000000000000000000,
    0b000000000000010000000000000000000000000000000000000000000000000000000000000000000,
    0b000000000000100000000000000000000000000000000000000000000000000000000000000000000,
    0b000000000001000000000000000000000000000000000000000000000000000000000000000000000,
    0b000000000010000000000000000000000000000000000000000000000000000000000000000000000,
    0b000000000100000000000000000000000000000000000000000000000000000000000000000000000,
    0b000000001000000000000000000000000000000000000000000000000000000000000000000000000,
    0b000000010000000000000000000000000000000000000000000000000000000000000000000000000,
    0b000000100000000000000000000000000000000000000000000000000000000000000000000000000,
    0b000001000000000000000000000000000000000000000000000000000000000000000000000000000,
    0b000010000000000000000000000000000000000000000000000000000000000000000000000000000,
    0b000100000000000000000000000000000000000000000000000000000000000000000000000000000,
    0b001000000000000000000000000000000000000000000000000000000000000000000000000000000,
    0b010000000000000000000000000000000000000000000000000000000000000000000000000000000,
    0b100000000000000000000000000000000000000000000000000000000000000000000000000000000,
};

const BAND_HOUSE_CELLS = [6]usize{
    0b000000000000000000111111111,
    0b000000000111111111000000000,
    0b111111111000000000000000000,
    0b000000111000000111000000111,
    0b000111000000111000000111000,
    0b111000000111000000111000000,
};

pub const HOUSE_CELLS = [27]u81{
    0b000000000000000000000000000000000000000000000000000000000000000000000000111111111,
    0b000000000000000000000000000000000000000000000000000000000000000111111111000000000,
    0b000000000000000000000000000000000000000000000000000000111111111000000000000000000,
    0b000000000000000000000000000000000000000000000111111111000000000000000000000000000,
    0b000000000000000000000000000000000000111111111000000000000000000000000000000000000,
    0b000000000000000000000000000111111111000000000000000000000000000000000000000000000,
    0b000000000000000000111111111000000000000000000000000000000000000000000000000000000,
    0b000000000111111111000000000000000000000000000000000000000000000000000000000000000,
    0b111111111000000000000000000000000000000000000000000000000000000000000000000000000,
    0b000000001000000001000000001000000001000000001000000001000000001000000001000000001,
    0b000000010000000010000000010000000010000000010000000010000000010000000010000000010,
    0b000000100000000100000000100000000100000000100000000100000000100000000100000000100,
    0b000001000000001000000001000000001000000001000000001000000001000000001000000001000,
    0b000010000000010000000010000000010000000010000000010000000010000000010000000010000,
    0b000100000000100000000100000000100000000100000000100000000100000000100000000100000,
    0b001000000001000000001000000001000000001000000001000000001000000001000000001000000,
    0b010000000010000000010000000010000000010000000010000000010000000010000000010000000,
    0b100000000100000000100000000100000000100000000100000000100000000100000000100000000,
    0b000000000000000000000000000000000000000000000000000000000000111000000111000000111,
    0b000000000000000000000000000000000000000000000000000000000111000000111000000111000,
    0b000000000000000000000000000000000000000000000000000000111000000111000000111000000,
    0b000000000000000000000000000000000111000000111000000111000000000000000000000000000,
    0b000000000000000000000000000000111000000111000000111000000000000000000000000000000,
    0b000000000000000000000000000111000000111000000111000000000000000000000000000000000,
    0b000000111000000111000000111000000000000000000000000000000000000000000000000000000,
    0b000111000000111000000111000000000000000000000000000000000000000000000000000000000,
    0b111000000111000000111000000000000000000000000000000000000000000000000000000000000,
};

fn generate_clear_band_houses() [27]usize {
    var clear_band_houses: [27]usize = undefined;
    for (0..27) |cell_index| {
        const row = cell_index / 9;
        const box = (cell_index % 9) / 3;
        clear_band_houses[cell_index] = ((BAND_HOUSE_CELLS[row] | BAND_HOUSE_CELLS[box + 3]) ^ ALL27) | BIT27[cell_index];
    }
    return clear_band_houses;
}

const CLEAR_BAND_HOUSES = generate_clear_band_houses();

fn generate_clear_houses() [81]u81 {
    var clear_houses: [81]u81 = undefined;
    for (0..81) |cell_index| {
        const row = cell_index / 9;
        const col = cell_index % 9;
        const box = (row / 3) * 3 + (col / 3);
        clear_houses[cell_index] = ((HOUSE_CELLS[row] | HOUSE_CELLS[col + 9] | HOUSE_CELLS[box + 18]) ^ ALL81) | BIT81[cell_index];
    }
    return clear_houses;
}

pub const CLEAR_HOUSES = generate_clear_houses();

fn generate_clear_house_indexes() [81]usize {
    var celar_house_indexes: [81]usize = undefined;
    for (0..81) |cell_index| {
        const row = cell_index / 9;
        const col = cell_index % 9;
        const box = (row / 3) * 3 + (col / 3);
        celar_house_indexes[cell_index] = (BIT9[row] | BIT9[col] << 9 | BIT9[box] << 18) ^ ALL27;
    }
    return celar_house_indexes;
}
pub const CLEAR_HOUSE_INDEXES = generate_clear_house_indexes();

fn generate_valid_band_cells() [162]usize {
    @setEvalBranchQuota(10000);
    var valid_band_cells: [162]usize = .{0} ** 162;
    valid_band_cells[0] = ALL27;
    for (0..3) |row_index| {
        var index: u8 = 0;
        for (valid_band_cells) |band_cells| {
            const columns: usize = (band_cells & BAND_HOUSE_CELLS[row_index]) >> row_index * 9;
            for (0..9) |col_index| {
                if (columns & BIT9[col_index] != 0) {
                    valid_band_cells[index] = band_cells & CLEAR_BAND_HOUSES[row_index * 9 + col_index];
                    index += 1;
                }
            }
        }
    }
    return valid_band_cells;
}

pub const VALID_BAND_CELLS = generate_valid_band_cells();

fn generate_digit_band_combinations() [162]u192 {
    @setEvalBranchQuota(100000);
    var digit_band_combinations: [162]u192 = undefined;
    for (VALID_BAND_CELLS, 0..) |band_cells1, index1| {
        var bit_set: u192 = 0;
        for (VALID_BAND_CELLS, 0..) |band_cells2, index2| {
            if (band_cells1 & band_cells2 == 0) {
                bit_set |= 1 << index2;
            }
        }
        digit_band_combinations[index1] = bit_set;
    }
    return digit_band_combinations;
}

pub const DIGIT_BAND_COMBINATIONS = generate_digit_band_combinations();

fn generate_board_band_combinations() [162]u192 {
    @setEvalBranchQuota(100000);
    var board_band_combinations: [162]u192 = undefined;
    for (VALID_BAND_CELLS, 0..) |band_cells1, index1| {
        var band_combinations: u192 = 0;
        for (VALID_BAND_CELLS, 0..) |band_cells2, index2| {
            const row1 = band_cells1 | band_cells1 >> 9 | band_cells1 >> 18;
            const row2 = band_cells2 | band_cells2 >> 9 | band_cells2 >> 18;
            if (row1 & row2 == 0) {
                band_combinations |= 1 << index2;
            }
        }
        board_band_combinations[index1] = band_combinations;
    }
    return board_band_combinations;
}

pub const BOARD_BAND_COMBINATIONS = generate_board_band_combinations();
