const std = @import("std");

pub const ALL27: usize = 0b111111111111111111111111111;

pub const ALL81: u81 = 0b111111111111111111111111111111111111111111111111111111111111111111111111111111111;

pub const ALL162: u192 = 0b111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111;

pub const BIT9 = [9]usize{
    0b000000001,
    0b000000010,
    0b000000100,
    0b000001000,
    0b000010000,
    0b000100000,
    0b001000000,
    0b010000000,
    0b100000000,
};

const BIT27 = [27]usize{
    0b000000000000000000000000001,
    0b000000000000000000000000010,
    0b000000000000000000000000100,
    0b000000000000000000000001000,
    0b000000000000000000000010000,
    0b000000000000000000000100000,
    0b000000000000000000001000000,
    0b000000000000000000010000000,
    0b000000000000000000100000000,
    0b000000000000000001000000000,
    0b000000000000000010000000000,
    0b000000000000000100000000000,
    0b000000000000001000000000000,
    0b000000000000010000000000000,
    0b000000000000100000000000000,
    0b000000000001000000000000000,
    0b000000000010000000000000000,
    0b000000000100000000000000000,
    0b000000001000000000000000000,
    0b000000010000000000000000000,
    0b000000100000000000000000000,
    0b000001000000000000000000000,
    0b000010000000000000000000000,
    0b000100000000000000000000000,
    0b001000000000000000000000000,
    0b010000000000000000000000000,
    0b100000000000000000000000000,
};

pub const BIT81 = [81]u81{
    0b000000000000000000000000000000000000000000000000000000000000000000000000000000001,
    0b000000000000000000000000000000000000000000000000000000000000000000000000000000010,
    0b000000000000000000000000000000000000000000000000000000000000000000000000000000100,
    0b000000000000000000000000000000000000000000000000000000000000000000000000000001000,
    0b000000000000000000000000000000000000000000000000000000000000000000000000000010000,
    0b000000000000000000000000000000000000000000000000000000000000000000000000000100000,
    0b000000000000000000000000000000000000000000000000000000000000000000000000001000000,
    0b000000000000000000000000000000000000000000000000000000000000000000000000010000000,
    0b000000000000000000000000000000000000000000000000000000000000000000000000100000000,
    0b000000000000000000000000000000000000000000000000000000000000000000000001000000000,
    0b000000000000000000000000000000000000000000000000000000000000000000000010000000000,
    0b000000000000000000000000000000000000000000000000000000000000000000000100000000000,
    0b000000000000000000000000000000000000000000000000000000000000000000001000000000000,
    0b000000000000000000000000000000000000000000000000000000000000000000010000000000000,
    0b000000000000000000000000000000000000000000000000000000000000000000100000000000000,
    0b000000000000000000000000000000000000000000000000000000000000000001000000000000000,
    0b000000000000000000000000000000000000000000000000000000000000000010000000000000000,
    0b000000000000000000000000000000000000000000000000000000000000000100000000000000000,
    0b000000000000000000000000000000000000000000000000000000000000001000000000000000000,
    0b000000000000000000000000000000000000000000000000000000000000010000000000000000000,
    0b000000000000000000000000000000000000000000000000000000000000100000000000000000000,
    0b000000000000000000000000000000000000000000000000000000000001000000000000000000000,
    0b000000000000000000000000000000000000000000000000000000000010000000000000000000000,
    0b000000000000000000000000000000000000000000000000000000000100000000000000000000000,
    0b000000000000000000000000000000000000000000000000000000001000000000000000000000000,
    0b000000000000000000000000000000000000000000000000000000010000000000000000000000000,
    0b000000000000000000000000000000000000000000000000000000100000000000000000000000000,
    0b000000000000000000000000000000000000000000000000000001000000000000000000000000000,
    0b000000000000000000000000000000000000000000000000000010000000000000000000000000000,
    0b000000000000000000000000000000000000000000000000000100000000000000000000000000000,
    0b000000000000000000000000000000000000000000000000001000000000000000000000000000000,
    0b000000000000000000000000000000000000000000000000010000000000000000000000000000000,
    0b000000000000000000000000000000000000000000000000100000000000000000000000000000000,
    0b000000000000000000000000000000000000000000000001000000000000000000000000000000000,
    0b000000000000000000000000000000000000000000000010000000000000000000000000000000000,
    0b000000000000000000000000000000000000000000000100000000000000000000000000000000000,
    0b000000000000000000000000000000000000000000001000000000000000000000000000000000000,
    0b000000000000000000000000000000000000000000010000000000000000000000000000000000000,
    0b000000000000000000000000000000000000000000100000000000000000000000000000000000000,
    0b000000000000000000000000000000000000000001000000000000000000000000000000000000000,
    0b000000000000000000000000000000000000000010000000000000000000000000000000000000000,
    0b000000000000000000000000000000000000000100000000000000000000000000000000000000000,
    0b000000000000000000000000000000000000001000000000000000000000000000000000000000000,
    0b000000000000000000000000000000000000010000000000000000000000000000000000000000000,
    0b000000000000000000000000000000000000100000000000000000000000000000000000000000000,
    0b000000000000000000000000000000000001000000000000000000000000000000000000000000000,
    0b000000000000000000000000000000000010000000000000000000000000000000000000000000000,
    0b000000000000000000000000000000000100000000000000000000000000000000000000000000000,
    0b000000000000000000000000000000001000000000000000000000000000000000000000000000000,
    0b000000000000000000000000000000010000000000000000000000000000000000000000000000000,
    0b000000000000000000000000000000100000000000000000000000000000000000000000000000000,
    0b000000000000000000000000000001000000000000000000000000000000000000000000000000000,
    0b000000000000000000000000000010000000000000000000000000000000000000000000000000000,
    0b000000000000000000000000000100000000000000000000000000000000000000000000000000000,
    0b000000000000000000000000001000000000000000000000000000000000000000000000000000000,
    0b000000000000000000000000010000000000000000000000000000000000000000000000000000000,
    0b000000000000000000000000100000000000000000000000000000000000000000000000000000000,
    0b000000000000000000000001000000000000000000000000000000000000000000000000000000000,
    0b000000000000000000000010000000000000000000000000000000000000000000000000000000000,
    0b000000000000000000000100000000000000000000000000000000000000000000000000000000000,
    0b000000000000000000001000000000000000000000000000000000000000000000000000000000000,
    0b000000000000000000010000000000000000000000000000000000000000000000000000000000000,
    0b000000000000000000100000000000000000000000000000000000000000000000000000000000000,
    0b000000000000000001000000000000000000000000000000000000000000000000000000000000000,
    0b000000000000000010000000000000000000000000000000000000000000000000000000000000000,
    0b000000000000000100000000000000000000000000000000000000000000000000000000000000000,
    0b000000000000001000000000000000000000000000000000000000000000000000000000000000000,
    0b000000000000010000000000000000000000000000000000000000000000000000000000000000000,
    0b000000000000100000000000000000000000000000000000000000000000000000000000000000000,
    0b000000000001000000000000000000000000000000000000000000000000000000000000000000000,
    0b000000000010000000000000000000000000000000000000000000000000000000000000000000000,
    0b000000000100000000000000000000000000000000000000000000000000000000000000000000000,
    0b000000001000000000000000000000000000000000000000000000000000000000000000000000000,
    0b000000010000000000000000000000000000000000000000000000000000000000000000000000000,
    0b000000100000000000000000000000000000000000000000000000000000000000000000000000000,
    0b000001000000000000000000000000000000000000000000000000000000000000000000000000000,
    0b000010000000000000000000000000000000000000000000000000000000000000000000000000000,
    0b000100000000000000000000000000000000000000000000000000000000000000000000000000000,
    0b001000000000000000000000000000000000000000000000000000000000000000000000000000000,
    0b010000000000000000000000000000000000000000000000000000000000000000000000000000000,
    0b100000000000000000000000000000000000000000000000000000000000000000000000000000000,
};

const BAND_HOUSES = [6]usize{
    0b000000000000000000111111111,
    0b000000000111111111000000000,
    0b111111111000000000000000000,
    0b000000111000000111000000111,
    0b000111000000111000000111000,
    0b111000000111000000111000000,
};

pub const BOARD_HOUSES = [27]u81{
    0b000000000000000000000000000000000000000000000000000000000000000000000000111111111,
    0b000000000000000000000000000000000000000000000000000000000000000111111111000000000,
    0b000000000000000000000000000000000000000000000000000000111111111000000000000000000,
    0b000000000000000000000000000000000000000000000111111111000000000000000000000000000,
    0b000000000000000000000000000000000000111111111000000000000000000000000000000000000,
    0b000000000000000000000000000111111111000000000000000000000000000000000000000000000,
    0b000000000000000000111111111000000000000000000000000000000000000000000000000000000,
    0b000000000111111111000000000000000000000000000000000000000000000000000000000000000,
    0b111111111000000000000000000000000000000000000000000000000000000000000000000000000,
    0b000000001000000001000000001000000001000000001000000001000000001000000001000000001,
    0b000000010000000010000000010000000010000000010000000010000000010000000010000000010,
    0b000000100000000100000000100000000100000000100000000100000000100000000100000000100,
    0b000001000000001000000001000000001000000001000000001000000001000000001000000001000,
    0b000010000000010000000010000000010000000010000000010000000010000000010000000010000,
    0b000100000000100000000100000000100000000100000000100000000100000000100000000100000,
    0b001000000001000000001000000001000000001000000001000000001000000001000000001000000,
    0b010000000010000000010000000010000000010000000010000000010000000010000000010000000,
    0b100000000100000000100000000100000000100000000100000000100000000100000000100000000,
    0b000000000000000000000000000000000000000000000000000000000000111000000111000000111,
    0b000000000000000000000000000000000000000000000000000000000111000000111000000111000,
    0b000000000000000000000000000000000000000000000000000000111000000111000000111000000,
    0b000000000000000000000000000000000111000000111000000111000000000000000000000000000,
    0b000000000000000000000000000000111000000111000000111000000000000000000000000000000,
    0b000000000000000000000000000111000000111000000111000000000000000000000000000000000,
    0b000000111000000111000000111000000000000000000000000000000000000000000000000000000,
    0b000111000000111000000111000000000000000000000000000000000000000000000000000000000,
    0b111000000111000000111000000000000000000000000000000000000000000000000000000000000,
};

fn generate_set27() [27]usize {
    var set_cells: [27]usize = undefined;
    for (0..27) |cell_index| {
        const row = cell_index / 9;
        const box = (cell_index % 9) / 3;
        set_cells[cell_index] = ((BAND_HOUSES[row] | BAND_HOUSES[box + 3]) ^ ALL27) | BIT27[cell_index];
    }
    return set_cells;
}

const SET27 = generate_set27();

fn generate_set81() [81]u81 {
    var set_cells: [81]u81 = undefined;
    for (0..81) |cell_index| {
        const row = cell_index / 9;
        const col = cell_index % 9;
        const box = (row / 3) * 3 + (col / 3);
        set_cells[cell_index] = ((BOARD_HOUSES[row] | BOARD_HOUSES[col + 9] | BOARD_HOUSES[box + 18]) ^ ALL81) | BIT81[cell_index];
    }
    return set_cells;
}

pub const SET81 = generate_set81();

fn generate_set_cell_houses() [81]usize {
    var cell_houses: [81]usize = undefined;
    for (0..81) |cell_index| {
        const row = cell_index / 9;
        const col = cell_index % 9;
        const box = (row / 3) * 3 + (col / 3);
        cell_houses[cell_index] = (BIT9[row] | BIT9[col] << 9 | BIT9[box] << 18) ^ ALL27;
    }
    return cell_houses;
}
pub const SET_CELL_HOUSES = generate_set_cell_houses();

fn generate_possibles() [162]usize {
    @setEvalBranchQuota(10000);
    var possibles: [162]usize = .{0} ** 162;
    possibles[0] = ALL27;
    for (0..3) |row_index| {
        var index: u8 = 0;
        for (possibles) |possible| {
            const columns: usize = (possible & BAND_HOUSES[row_index]) >> row_index * 9;
            for (0..9) |col_index| {
                if (columns & BIT9[col_index] != 0) {
                    possibles[index] = possible & SET27[row_index * 9 + col_index];
                    index += 1;
                }
            }
        }
    }
    return possibles;
}

pub const POSSIBLES = generate_possibles();

fn generate_number_combinations() [162]u192 {
    @setEvalBranchQuota(100000);
    var number_combinations: [162]u192 = undefined;
    for (POSSIBLES, 0..) |possible1, index1| {
        var bit_set: u192 = 0;
        for (POSSIBLES, 0..) |possible2, index2| {
            if (possible1 & possible2 == 0) {
                bit_set |= 1 << index2;
            }
        }
        number_combinations[index1] = bit_set;
    }
    return number_combinations;
}

pub const NUMBER_COMBINATIONS = generate_number_combinations();

fn generate_band_combinations() [162]u192 {
    @setEvalBranchQuota(100000);
    var row_combinations: [162]u192 = undefined;
    for (POSSIBLES, 0..) |possible1, index1| {
        var bit_set: u192 = 0;
        for (POSSIBLES, 0..) |possible2, index2| {
            const row1 = possible1 | possible1 >> 9 | possible1 >> 18;
            const row2 = possible2 | possible2 >> 9 | possible2 >> 18;
            if (row1 & row2 == 0) {
                bit_set |= 1 << index2;
            }
        }
        row_combinations[index1] = bit_set;
    }
    return row_combinations;
}

pub const BAND_COMBINATIONS = generate_band_combinations();
